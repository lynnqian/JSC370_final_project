library(ggplot2)
library(mgcv)
library(plotly)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
nrow(playstore_raw)
# all the variables with missing values
names(which(sapply(playstore_raw, anyNA)))
# remove observations with missing values for Rating
playstore <- dplyr::filter(playstore_raw, !is.na(Rating))
# keep only one observation for each apps
playstore <- playstore[match(unique(playstore$App), playstore$App),]
dim(playstore)
names(which(sapply(playstore, anyNA)))
# summary table
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table for Rating")
playstore <- playstore[Rating <= 5]
# summary table after removing unusual observations
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table after removing unusual Rating")
dim(playstore)
# convert from type character to type integer
playstore$Reviews <- type.convert(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
# remove the last character: +
playstore$Installs <- substr(playstore$Installs, 1, nchar(playstore$Installs)-1)
# convert from type character to type integer
playstore$Installs <- as.numeric(gsub(",","",playstore$Installs))
# summary table for number of installations
tibble(`minimum number of Installs` = min(playstore$Installs),
`maximum number of Installs` = max(playstore$Installs),
`mean number of Installs` = mean(playstore$Installs)
) %>%
knitr::kable(caption = "summary table for Installs")
head(count(playstore, Category)) %>%
knitr::kable(caption = "number of apps per each category: first 6 categories")
nrow(distinct(playstore, Category))
# summary table for Size
playstore <- playstore[!(playstore$Size == "Varies with device")]
playstore$Size <- substr(playstore$Size, 1, nchar(playstore$Size)-1)
playstore$Size <- as.numeric(playstore$Size)
playstore$Size <- playstore$Size*1000000
tibble(`minimum Size` = min(playstore$Size),
`maximum Size` = max(playstore$Size),
`average Size` = mean(playstore$Size)
) %>%
knitr::kable(caption = "summary table for Size")
dim(playstore)
playstore$review_level <- ifelse(playstore$Reviews < 1000, "almost no reviews",
ifelse(playstore$Reviews < 10000, "medium reviews",
ifelse(playstore$Reviews < 50000, "many reviews", "lots of reviews")))
playstore$install_level <- ifelse(playstore$Installs < 1000, "not popular",
ifelse(playstore$Installs < 10000, "normal",
ifelse(playstore$Installs < 50000, "popular", "super popular")))
playstore %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
# summary table
less_reviews <- playstore %>%
filter(Reviews < 200000) %>%
summarise(Rating, Reviews)
less_reviews %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
color = c("red", "green", "blue", "black")
playstore %>%
ggplot() +
aes(x = Rating, fill = install_level) +
xlab("Rating") +
labs(fill = "Install level") +
geom_bar(position = "dodge") +
scale_fill_brewer(palette = "Set2") +
theme_classic() +
labs(title = "barchart of Rating by Install levels")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
# summary table
playstore_250 <- playstore %>%
group_by(Category) %>%
filter(n() > 250) %>%
summarise(Rating, n())
playstore_250
nrow(distinct(playstore_250, Category))
playstore_250 %>%
ggplot() +
aes(x = Category, y = Rating) +
xlab("Category") +
ylab("Rating") +
stat_summary(match.fun.data = "mean_sdl", geom = "errorbar") +
stat_summary(match.fun.data = "mean_sdl") +
theme_minimal() +
labs(title = "statistical summary graph of app's Rating by Category")
line_plot <- ggplot(playstore, aes(x = Reviews, y = Rating, colour = Category)) +
geom_line()
ggplotly(line_plot)
# change the type of the size
playstore$new_size <- playstore$Size/1000000
new_playstore %>%
plot_ly(x = ~Reviews, y = ~Rating, type = 'scatter', mode = "markers", color = ~Category,  marker = list(size=~new_size/10, sizemode = 'diameter', opacity = 0.5))
cat_lm <- lm(Rating~Category, data = playstore)
summary(cat_lm)
ins_lm <- lm(Rating~Installs, data = playstore)
summary(ins_lm)
rev_lm <- lm(Rating~Reviews, data = playstore)
summary(rev_lm)
size_lm <- lm(Rating~Size, data = playstore)
summary(size_lm)
new_lm <- cat_lm <- lm(Rating~Reviews + Installs + + as.factor(Category) + Size, data = playstore)
new_lm <- cat_lm <- lm(Rating~Reviews + Installs + + as.factor(Category) + Size, data = playstore)
summary(new_lm)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) + Size, data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) + + s(Installs, bs = "cr"), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) + s(Installs, bs = "cr"), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) + s(Size, bs = "cr"), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) - Size, data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + Installs + as.factor(Category) - Size, data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ Reviews + Installs + as.factor(Category) - Size, data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ Reviews + Installs + as.factor(Category) + Size, data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ Reviews + Installs + as.factor(Category), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) + s(Size, bs = "cr"), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) , data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr")as.factor(Category), data = playstore)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + as.factor(Category), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) + s(Size, bs = "cr"), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
new_lm <- cat_lm <- lm(Rating~Reviews + Installs + + as.factor(Category), data = playstore)
summary(new_lm)
new_lm <- cat_lm <- lm(Rating~Reviews + Installs + as.factor(Category) + Size, data = playstore)
summary(new_lm)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs) + as.factor(Category) + s(Size, bs = "cr"), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs) + as.factor(Category) + s(Size), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
# change the type of the size
playstore$new_size <- playstore$Size/1000000
playstore %>%
plot_ly(x = ~Reviews, y = ~Rating, type = 'scatter', mode = "markers", color = ~Category,  marker = list(size=~new_size/10, sizemode = 'diameter', opacity = 0.5))
new_playstore <- playstore[playstore$Reviews < 200000]
new_playstore %>%
plot_ly(x = ~Reviews, y = ~Rating, type = 'scatter', mode = "markers", color = ~Category,  marker = list(size=~new_size/10, sizemode = 'diameter', opacity = 0.5))
unlink('JSC_final_cache', recursive = TRUE)
# load the library we need
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(mgcv)
library(plotly)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
nrow(playstore_raw)
# all the variables with missing values
names(which(sapply(playstore_raw, anyNA)))
# remove observations with missing values for Rating
playstore <- dplyr::filter(playstore_raw, !is.na(Rating))
# keep only one observation for each apps
playstore <- playstore[match(unique(playstore$App), playstore$App),]
dim(playstore)
names(which(sapply(playstore, anyNA)))
# summary table
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table for Rating")
playstore <- playstore[Rating <= 5]
# summary table after removing unusual observations
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table after removing unusual Rating")
dim(playstore)
# convert from type character to type integer
playstore$Reviews <- type.convert(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
# remove the last character: +
playstore$Installs <- substr(playstore$Installs, 1, nchar(playstore$Installs)-1)
# convert from type character to type integer
playstore$Installs <- as.numeric(gsub(",","",playstore$Installs))
# summary table for number of installations
tibble(`minimum number of Installs` = min(playstore$Installs),
`maximum number of Installs` = max(playstore$Installs),
`mean number of Installs` = mean(playstore$Installs)
) %>%
knitr::kable(caption = "summary table for Installs")
head(count(playstore, Category)) %>%
knitr::kable(caption = "number of apps per each category: first 6 categories")
nrow(distinct(playstore, Category))
# summary table for Size
playstore <- playstore[!(playstore$Size == "Varies with device")]
playstore$Size <- substr(playstore$Size, 1, nchar(playstore$Size)-1)
playstore$Size <- as.numeric(playstore$Size)
playstore$Size <- playstore$Size*1000000
tibble(`minimum Size` = min(playstore$Size),
`maximum Size` = max(playstore$Size),
`average Size` = mean(playstore$Size)
) %>%
knitr::kable(caption = "summary table for Size")
dim(playstore)
playstore$review_level <- ifelse(playstore$Reviews < 1000, "almost no reviews",
ifelse(playstore$Reviews < 10000, "medium reviews",
ifelse(playstore$Reviews < 50000, "many reviews", "lots of reviews")))
playstore$install_level <- ifelse(playstore$Installs < 1000, "not popular",
ifelse(playstore$Installs < 10000, "normal",
ifelse(playstore$Installs < 50000, "popular", "super popular")))
playstore %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
# summary table
less_reviews <- playstore %>%
filter(Reviews < 200000) %>%
summarise(Rating, Reviews)
less_reviews %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
color = c("red", "green", "blue", "black")
playstore %>%
ggplot() +
aes(x = Rating, fill = install_level) +
xlab("Rating") +
labs(fill = "Install level") +
geom_bar(position = "dodge") +
scale_fill_brewer(palette = "Set2") +
theme_classic() +
labs(title = "barchart of Rating by Install levels")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
# summary table
playstore_250 <- playstore %>%
group_by(Category) %>%
filter(n() > 250) %>%
summarise(Rating, n())
playstore_250
nrow(distinct(playstore_250, Category))
playstore_250 %>%
ggplot() +
aes(x = Category, y = Rating) +
xlab("Category") +
ylab("Rating") +
stat_summary(match.fun.data = "mean_sdl", geom = "errorbar") +
stat_summary(match.fun.data = "mean_sdl") +
theme_minimal() +
labs(title = "statistical summary graph of app's Rating by Category")
line_plot <- ggplot(playstore, aes(x = Reviews, y = Rating, colour = Category)) +
geom_line()
ggplotly(line_plot)
# change the type of the size
playstore$new_size <- playstore$Size/1000000
playstore %>%
plot_ly(x = ~Reviews, y = ~Rating, type = 'scatter', mode = "markers", color = ~Category,  marker = list(size=~new_size/10, sizemode = 'diameter', opacity = 0.5))
cat_lm <- lm(Rating~Category, data = playstore)
summary(cat_lm)
ins_lm <- lm(Rating~Installs, data = playstore)
summary(ins_lm)
rev_lm <- lm(Rating~Reviews, data = playstore)
summary(rev_lm)
size_lm <- lm(Rating~Size, data = playstore)
summary(size_lm)
new_lm <- cat_lm <- lm(Rating~Reviews + Installs + as.factor(Category) + Size, data = playstore)
summary(new_lm)
Rating_gam <- gam(Rating ~ s(Reviews, bs = "cr") + s(Installs, bs = "cr") + as.factor(Category) + s(Size, bs = "cr"), data = playstore)
summary(Rating_gam)
# plot the non-linear association
plot(Rating_gam)
# convert from type character to type integer
playstore$Reviews <- as.numeric(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
# load the library we need
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(mgcv)
library(plotly)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
nrow(playstore_raw)
# all the variables with missing values
names(which(sapply(playstore_raw, anyNA)))
# remove observations with missing values for Rating
playstore <- dplyr::filter(playstore_raw, !is.na(Rating))
# keep only one observation for each apps
playstore <- playstore[match(unique(playstore$App), playstore$App),]
dim(playstore)
names(which(sapply(playstore, anyNA)))
# summary table
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table for Rating")
playstore <- playstore[Rating <= 5]
# summary table after removing unusual observations
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table after removing unusual Rating")
dim(playstore)
# convert from type character to type integer
playstore$Reviews <- as.numeric(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
# load the library we need
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(mgcv)
library(plotly)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
nrow(playstore_raw)
# all the variables with missing values
names(which(sapply(playstore_raw, anyNA)))
# remove observations with missing values for Rating
playstore <- dplyr::filter(playstore_raw, !is.na(Rating))
# keep only one observation for each apps
playstore <- playstore[match(unique(playstore$App), playstore$App),]
dim(playstore)
names(which(sapply(playstore, anyNA)))
# summary table
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table for Rating")
playstore <- playstore[Rating <= 5]
# summary table after removing unusual observations
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table after removing unusual Rating")
dim(playstore)
# convert from type character to type integer
playstore$Reviews <- as.numeric(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
# remove the last character: +
playstore$Installs <- substr(playstore$Installs, 1, nchar(playstore$Installs)-1)
# convert from type character to type integer
playstore$Installs <- as.numeric(gsub(",","",playstore$Installs))
# summary table for number of installations
tibble(`minimum number of Installs` = min(playstore$Installs),
`maximum number of Installs` = max(playstore$Installs),
`mean number of Installs` = mean(playstore$Installs)
) %>%
knitr::kable(caption = "summary table for Installs")
head(count(playstore, Category)) %>%
knitr::kable(caption = "number of apps per each category: first 6 categories")
nrow(distinct(playstore, Category))
# summary table for Size
playstore <- playstore[!(playstore$Size == "Varies with device")]
playstore$Size <- substr(playstore$Size, 1, nchar(playstore$Size)-1)
playstore$Size <- as.numeric(playstore$Size)
playstore$Size <- playstore$Size*1000000
tibble(`minimum Size` = min(playstore$Size),
`maximum Size` = max(playstore$Size),
`average Size` = mean(playstore$Size)
) %>%
knitr::kable(caption = "summary table for Size")
dim(playstore)
playstore$review_level <- ifelse(playstore$Reviews < 1000, "almost no reviews",
ifelse(playstore$Reviews < 10000, "medium reviews",
ifelse(playstore$Reviews < 50000, "many reviews", "lots of reviews")))
playstore$install_level <- ifelse(playstore$Installs < 1000, "not popular",
ifelse(playstore$Installs < 10000, "normal",
ifelse(playstore$Installs < 50000, "popular", "super popular")))
playstore %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
# summary table
less_reviews <- playstore %>%
filter(Reviews < 200000) %>%
summarise(Rating, Reviews)
less_reviews %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
color = c("red", "green", "blue", "black")
playstore %>%
ggplot() +
aes(x = Rating, fill = install_level) +
xlab("Rating") +
labs(fill = "Install level") +
geom_bar(position = "dodge") +
scale_fill_brewer(palette = "Set2") +
theme_classic() +
labs(title = "barchart of Rating by Install levels")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
