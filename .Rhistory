library(caret)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
rpart.plot(treefit)
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
rpart.plot(treefit)
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
set.seed(111)
# split into training and testing
new_play <- playstore_250[playstore$Category == "GAME"]
set.seed(111)
# split into training and testing
new_play <- playstore_250[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
# load the library we need
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(mgcv)
library(plotly)
library(rsample)
library(dplyr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(xgboost)
library(tidyverse)
library(rpart.plot)
library(caret)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
nrow(playstore_raw)
# all the variables with missing values
names(which(sapply(playstore_raw, anyNA)))
# remove observations with missing values for Rating
playstore <- dplyr::filter(playstore_raw, !is.na(Rating))
# keep only one observation for each apps
playstore <- playstore[match(unique(playstore$App), playstore$App),]
dim(playstore)
names(which(sapply(playstore, anyNA)))
# summary table
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table for Rating")
playstore <- playstore[Rating <= 5]
# summary table after removing unusual observations
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table after removing unusual Rating")
dim(playstore)
# convert from type character to type integer
playstore$Reviews <- as.numeric(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
# remove the last character: +
playstore$Installs <- substr(playstore$Installs, 1, nchar(playstore$Installs)-1)
# convert from type character to type integer
playstore$Installs <- as.numeric(gsub(",","",playstore$Installs))
# summary table for number of installations
tibble(`minimum number of Installs` = min(playstore$Installs),
`maximum number of Installs` = max(playstore$Installs),
`mean number of Installs` = mean(playstore$Installs)
) %>%
knitr::kable(caption = "summary table for Installs")
head(count(playstore, Category)) %>%
knitr::kable(caption = "number of apps per each category: first 6 categories")
nrow(distinct(playstore, Category))
# summary table for Size
playstore <- playstore[!(playstore$Size == "Varies with device")]
playstore$Size <- substr(playstore$Size, 1, nchar(playstore$Size)-1)
playstore$Size <- as.numeric(playstore$Size)
playstore$Size <- playstore$Size*1000000
tibble(`minimum Size` = min(playstore$Size),
`maximum Size` = max(playstore$Size),
`average Size` = mean(playstore$Size)
) %>%
knitr::kable(caption = "summary table for Size")
dim(playstore)
playstore$review_level <- ifelse(playstore$Reviews < 1000, "almost no reviews",
ifelse(playstore$Reviews < 10000, "medium reviews",
ifelse(playstore$Reviews < 50000, "many reviews", "lots of reviews")))
playstore$install_level <- ifelse(playstore$Installs < 1000, "not popular",
ifelse(playstore$Installs < 10000, "normal",
ifelse(playstore$Installs < 50000, "popular", "super popular")))
playstore %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
# summary table
less_reviews <- playstore %>%
filter(Reviews < 200000) %>%
summarise(Rating, Reviews)
less_reviews %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
color = c("red", "green", "blue", "black")
playstore %>%
ggplot() +
aes(x = Rating, fill = install_level) +
xlab("Rating") +
labs(fill = "Install level") +
geom_bar(position = "dodge") +
scale_fill_brewer(palette = "Set2") +
theme_classic() +
labs(title = "barchart of Rating by Install levels")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
View(new_play)
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
new_play$rating_level <- ifelse(new_play$Rating < 4, "bad", "good")
# Fit a regression tree using the training set and then plot it
treefit <- rpart(rating_level~., method = "anova", control = list(cp=0), data = train)
# load the library we need
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(mgcv)
library(plotly)
library(rsample)
library(dplyr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(xgboost)
library(tidyverse)
library(rpart.plot)
library(caret)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
nrow(playstore_raw)
# all the variables with missing values
names(which(sapply(playstore_raw, anyNA)))
# remove observations with missing values for Rating
playstore <- dplyr::filter(playstore_raw, !is.na(Rating))
# keep only one observation for each apps
playstore <- playstore[match(unique(playstore$App), playstore$App),]
dim(playstore)
names(which(sapply(playstore, anyNA)))
# summary table
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table for Rating")
playstore <- playstore[Rating <= 5]
# summary table after removing unusual observations
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table after removing unusual Rating")
dim(playstore)
# convert from type character to type integer
playstore$Reviews <- as.numeric(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
# remove the last character: +
playstore$Installs <- substr(playstore$Installs, 1, nchar(playstore$Installs)-1)
# convert from type character to type integer
playstore$Installs <- as.numeric(gsub(",","",playstore$Installs))
# summary table for number of installations
tibble(`minimum number of Installs` = min(playstore$Installs),
`maximum number of Installs` = max(playstore$Installs),
`mean number of Installs` = mean(playstore$Installs)
) %>%
knitr::kable(caption = "summary table for Installs")
head(count(playstore, Category)) %>%
knitr::kable(caption = "number of apps per each category: first 6 categories")
nrow(distinct(playstore, Category))
# summary table for Size
playstore <- playstore[!(playstore$Size == "Varies with device")]
playstore$Size <- substr(playstore$Size, 1, nchar(playstore$Size)-1)
playstore$Size <- as.numeric(playstore$Size)
playstore$Size <- playstore$Size*1000000
tibble(`minimum Size` = min(playstore$Size),
`maximum Size` = max(playstore$Size),
`average Size` = mean(playstore$Size)
) %>%
knitr::kable(caption = "summary table for Size")
dim(playstore)
playstore$review_level <- ifelse(playstore$Reviews < 1000, "almost no reviews",
ifelse(playstore$Reviews < 10000, "medium reviews",
ifelse(playstore$Reviews < 50000, "many reviews", "lots of reviews")))
playstore$install_level <- ifelse(playstore$Installs < 1000, "not popular",
ifelse(playstore$Installs < 10000, "normal",
ifelse(playstore$Installs < 50000, "popular", "super popular")))
playstore %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
# summary table
less_reviews <- playstore %>%
filter(Reviews < 200000) %>%
summarise(Rating, Reviews)
less_reviews %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
color = c("red", "green", "blue", "black")
playstore %>%
ggplot() +
aes(x = Rating, fill = install_level) +
xlab("Rating") +
labs(fill = "Install level") +
geom_bar(position = "dodge") +
scale_fill_brewer(palette = "Set2") +
theme_classic() +
labs(title = "barchart of Rating by Install levels")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
new_play$rating_level <- ifelse(new_play$Rating < 4, "bad", "good")
# Fit a regression tree using the training set and then plot it
treefit <- rpart(rating_level~., method = "anova", control = list(cp=0), data = train)
set.seed(111)
# split into training and testing
playstore$rating_level <- ifelse(new_play$Rating < 4, "bad", "good")
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(rating_level~., method = "anova", control = list(cp=0), data = train)
View(playstore)
# Fit a regression tree using the training set and then plot it
treefit <- rpart(rating_level~., method = "anova", control = list(cp=0), data = train)
set.seed(111)
# split into training and testing
playstore$rating_level <- ifelse(new_play$Rating < 4, "bad", "good")
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("rating_level", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(rating_level~., method = "anova", control = list(cp=0), data = train)
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "GAME"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
# Fit a regression tree using the training set and then plot it
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
# load the library we need
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(mgcv)
library(plotly)
library(rsample)
library(dplyr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(xgboost)
library(tidyverse)
library(rpart.plot)
library(caret)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
# load in the data
playstore_raw <- data.table::fread("googleplaystore.csv",fill=TRUE)
nrow(playstore_raw)
# all the variables with missing values
names(which(sapply(playstore_raw, anyNA)))
# remove observations with missing values for Rating
playstore <- dplyr::filter(playstore_raw, !is.na(Rating))
# keep only one observation for each apps
playstore <- playstore[match(unique(playstore$App), playstore$App),]
dim(playstore)
names(which(sapply(playstore, anyNA)))
# summary table
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table for Rating")
playstore <- playstore[Rating <= 5]
# summary table after removing unusual observations
tibble(`minimum Rating` = min(playstore$Rating),
`maximum Rating` = max(playstore$Rating),
`average Rating` = mean(playstore$Rating)
) %>%
knitr::kable(caption = "summary table after removing unusual Rating")
dim(playstore)
# convert from type character to type integer
playstore$Reviews <- as.numeric(playstore$Reviews)
#playstore$Reviews <- as.interger(playstore$Reviews)
tibble(`minimum number of Reviews` = min(playstore$Reviews),
`maximum number of Reviews` = max(playstore$Reviews),
`average number of Reviews` = mean(playstore$Reviews)
) %>%
knitr::kable(caption = "summary table for Reviews")
# remove the last character: +
playstore$Installs <- substr(playstore$Installs, 1, nchar(playstore$Installs)-1)
# convert from type character to type integer
playstore$Installs <- as.numeric(gsub(",","",playstore$Installs))
# summary table for number of installations
tibble(`minimum number of Installs` = min(playstore$Installs),
`maximum number of Installs` = max(playstore$Installs),
`mean number of Installs` = mean(playstore$Installs)
) %>%
knitr::kable(caption = "summary table for Installs")
head(count(playstore, Category)) %>%
knitr::kable(caption = "number of apps per each category: first 6 categories")
nrow(distinct(playstore, Category))
# summary table for Size
playstore <- playstore[!(playstore$Size == "Varies with device")]
playstore$Size <- substr(playstore$Size, 1, nchar(playstore$Size)-1)
playstore$Size <- as.numeric(playstore$Size)
playstore$Size <- playstore$Size*1000000
tibble(`minimum Size` = min(playstore$Size),
`maximum Size` = max(playstore$Size),
`average Size` = mean(playstore$Size)
) %>%
knitr::kable(caption = "summary table for Size")
dim(playstore)
playstore$review_level <- ifelse(playstore$Reviews < 1000, "almost no reviews",
ifelse(playstore$Reviews < 10000, "medium reviews",
ifelse(playstore$Reviews < 50000, "many reviews", "lots of reviews")))
playstore$install_level <- ifelse(playstore$Installs < 1000, "not popular",
ifelse(playstore$Installs < 10000, "normal",
ifelse(playstore$Installs < 50000, "popular", "super popular")))
playstore %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
# summary table
less_reviews <- playstore %>%
filter(Reviews < 200000) %>%
summarise(Rating, Reviews)
less_reviews %>%
ggplot() +
aes(x = Reviews, y=Rating) +
geom_jitter() +
stat_smooth(method=lm) +
theme_minimal() +
labs(title = "scatterplots with regression lines of Reviews vs Rating")
color = c("red", "green", "blue", "black")
playstore %>%
ggplot() +
aes(x = Rating, fill = install_level) +
xlab("Rating") +
labs(fill = "Install level") +
geom_bar(position = "dodge") +
scale_fill_brewer(palette = "Set2") +
theme_classic() +
labs(title = "barchart of Rating by Install levels")
playstore %>%
filter(Category == "GAME") %>%
plot_ly(x=~Rating, y=~Installs/30, type = "scatter", name = "Installs", mode = "lines") %>%
add_lines(x=~Rating, y=~Reviews, type = "scatter", name = "Reviews", mode = "lines")
set.seed(111)
# split into training and testing
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
# Fit a regression tree using the training set and then plot it
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "TOOL"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
# Fit a regression tree using the training set and then plot it
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "TOOL"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
set.seed(111)
# split into training and testing
new_play <- playstore[playstore$Category == "TOOL"]
new_play <- playstore[, c("Rating", "Reviews", "Installs")]
train_idx <- sample(1:nrow(new_play), round(0.7 * nrow(new_play)))
train <- new_play[train_idx,]
test <- new_play[-train_idx,]
# Fit a regression tree using the training set and then plot it
treefit <- rpart(Rating~., method = "anova", control = list(cp=0), data = train)
# Fit a regression tree using the training set and then plot it
optimalcp <- treefit$cptable[which.min(treefit$cptable[,"xerror"]), "CP"]
treepruned <- prune(treefit, cp = optimalcp)
rpart.plot(treepruned)
tree_pred <- predict(treepruned, test)
test_tree <- cbind(test, tree_pred)
tree_mse <- sum((test_tree$tree_pred - test_tree$Rating)^2)/dim(test_tree)[1]
tree_mse
